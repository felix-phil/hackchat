{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nexport var AUTHENTICATE_SUCCESS = \"AUTHENTICATE_SUCCESS\";\nexport var AUTHENTICATE = \"AUTHENTICATE\";\nexport var AUTHENTICATE_FAIL = \"AUTHENTICATE_FAIL\";\nexport var SET_DEVICE_ID = \"SET_DEVICE_ID\";\nimport AsyncStorage from \"@react-native-async-storage/async-storage\";\nimport { refreshTokenUrl, requestLoginUrl, verifyLoginUrl } from \"../../constants/endpoints\";\nimport * as loadActions from \"./loading\";\nexport var setDeviceId = function setDeviceId(deviceId) {\n  return function _callee(dispatch) {\n    return _regeneratorRuntime.async(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.prev = 0;\n            _context.next = 3;\n            return _regeneratorRuntime.awrap(AsyncStorage.setItem(\"deviceId\", deviceId));\n\n          case 3:\n            _context.next = 5;\n            return _regeneratorRuntime.awrap(dispatch({\n              type: SET_DEVICE_ID,\n              payload: deviceId\n            }));\n\n          case 5:\n            _context.next = 10;\n            break;\n\n          case 7:\n            _context.prev = 7;\n            _context.t0 = _context[\"catch\"](0);\n            console.log(_context.t0);\n\n          case 10:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, [[0, 7]], Promise);\n  };\n};\nexport var authenticate = function authenticate(phone, channel) {\n  return function _callee2(dispatch, getState) {\n    var deviceId, res, errorMessage, errorData, resData;\n    return _regeneratorRuntime.async(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            _context2.prev = 0;\n            deviceId = getState().auth.deviceId;\n            dispatch(loadActions.startLoading(\"Sending Verification SMS to \" + phone));\n            console.log(\"requesting from \" + requestLoginUrl + \"...\");\n            _context2.next = 6;\n            return _regeneratorRuntime.awrap(fetch(requestLoginUrl, {\n              method: \"POST\",\n              body: JSON.stringify({\n                phone: phone,\n                deviceId: deviceId,\n                channel: channel\n              }),\n              headers: {\n                \"Content-Type\": \"application/json\",\n                \"Accept\": \"application/json\"\n              }\n            }));\n\n          case 6:\n            res = _context2.sent;\n\n            if (res.ok) {\n              _context2.next = 15;\n              break;\n            }\n\n            dispatch(loadActions.stopLoading());\n            errorMessage = \"Internal server error!\";\n            _context2.next = 12;\n            return _regeneratorRuntime.awrap(res.json());\n\n          case 12:\n            errorData = _context2.sent;\n\n            if (errorData.data && errorData.data.length !== 0) {\n              errorMessage = errorData.data[0].msg;\n            } else {\n              errorMessage = errorData.message;\n            }\n\n            throw new Error(errorMessage);\n\n          case 15:\n            _context2.next = 17;\n            return _regeneratorRuntime.awrap(res.json());\n\n          case 17:\n            resData = _context2.sent;\n            console.log(resData);\n            dispatch({\n              type: AUTHENTICATE,\n              payload: resData\n            });\n            dispatch(loadActions.stopLoading());\n            _context2.next = 26;\n            break;\n\n          case 23:\n            _context2.prev = 23;\n            _context2.t0 = _context2[\"catch\"](0);\n            throw _context2.t0;\n\n          case 26:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, null, null, [[0, 23]], Promise);\n  };\n};\nexport var verifyOtp = function verifyOtp(otp, phone) {\n  return function _callee3(dispatch, getState) {\n    var controller, timeoutId, res, errorMessage, errorData, resData, _refreshToken, accessToken, user, expiresIn;\n\n    return _regeneratorRuntime.async(function _callee3$(_context3) {\n      while (1) {\n        switch (_context3.prev = _context3.next) {\n          case 0:\n            controller = new AbortController();\n            timeoutId = setTimeout(function () {\n              return controller.abort();\n            }, 10000);\n            _context3.prev = 2;\n            dispatch(loadActions.startLoading(\"Verifying OTP\"));\n            console.log(\"requesting from \" + verifyLoginUrl + \"...\");\n            _context3.next = 7;\n            return _regeneratorRuntime.awrap(fetch(verifyLoginUrl, {\n              method: \"POST\",\n              body: JSON.stringify({\n                phone: phone,\n                deviceId: getState().auth.deviceId,\n                code: otp\n              }),\n              headers: {\n                \"Content-Type\": \"application/json\",\n                \"Accept\": \"application/json\"\n              },\n              signal: controller.signal\n            }));\n\n          case 7:\n            res = _context3.sent;\n\n            if (res.ok) {\n              _context3.next = 16;\n              break;\n            }\n\n            dispatch(loadActions.stopLoading());\n            errorMessage = \"Internal server error!\";\n            _context3.next = 13;\n            return _regeneratorRuntime.awrap(res.json());\n\n          case 13:\n            errorData = _context3.sent;\n\n            if (errorData.data && errorData.data.length !== 0) {\n              errorMessage = errorData.data[0].msg;\n            } else {\n              errorMessage = errorData.message;\n            }\n\n            throw new Error(errorMessage);\n\n          case 16:\n            _context3.next = 18;\n            return _regeneratorRuntime.awrap(res.json());\n\n          case 18:\n            resData = _context3.sent;\n            console.log(resData);\n            _refreshToken = resData.refresh;\n            accessToken = resData.token;\n            user = resData.user;\n            expiresIn = new Date(Date.now() + 6 * (60 * 60 * 1000)).toISOString();\n            dispatch(authenticateUser({\n              refreshToken: _refreshToken,\n              accessToken: accessToken,\n              user: user,\n              expiresIn: expiresIn\n            }));\n            _context3.next = 27;\n            return _regeneratorRuntime.awrap(storeData(\"authData\", {\n              refreshToken: _refreshToken,\n              accessToken: accessToken,\n              user: user,\n              expiresIn: expiresIn\n            }));\n\n          case 27:\n            dispatch(loadActions.stopLoading());\n            _context3.next = 34;\n            break;\n\n          case 30:\n            _context3.prev = 30;\n            _context3.t0 = _context3[\"catch\"](2);\n            dispatch(loadActions.stopLoading());\n            throw _context3.t0;\n\n          case 34:\n          case \"end\":\n            return _context3.stop();\n        }\n      }\n    }, null, null, [[2, 30]], Promise);\n  };\n};\nexport var authFail = function authFail() {\n  return function (dispatch) {\n    dispatch({\n      type: AUTHENTICATE_FAIL\n    });\n  };\n};\nexport var authenticateUser = function authenticateUser(userValues) {\n  return function (dispatch) {\n    var refreshToken = userValues.refreshToken,\n        accessToken = userValues.accessToken,\n        user = userValues.user,\n        expiresIn = userValues.expiresIn;\n\n    try {\n      dispatch({\n        type: AUTHENTICATE_SUCCESS,\n        payload: {\n          refreshToken: refreshToken,\n          accessToken: accessToken,\n          user: user,\n          expiresIn: expiresIn\n        }\n      });\n    } catch (error) {\n      throw error;\n    }\n  };\n};\nexport var refreshToken = function refreshToken() {\n  return function _callee4(dispatch, getState) {\n    var deviceId, authData, res, errorMessage, errorData, resData, newRefreshToken, accessToken, _await$getData, user, expiresIn;\n\n    return _regeneratorRuntime.async(function _callee4$(_context4) {\n      while (1) {\n        switch (_context4.prev = _context4.next) {\n          case 0:\n            _context4.prev = 0;\n            _context4.next = 3;\n            return _regeneratorRuntime.awrap(AsyncStorage.getItem(\"deviceId\"));\n\n          case 3:\n            deviceId = _context4.sent;\n            _context4.next = 6;\n            return _regeneratorRuntime.awrap(getData(\"authData\"));\n\n          case 6:\n            authData = _context4.sent;\n            dispatch(loadActions.startLoading(\"Loading... \"));\n            console.log(deviceId);\n            console.log(\"requesting from \" + refreshTokenUrl + \"...\");\n            _context4.next = 12;\n            return _regeneratorRuntime.awrap(fetch(refreshTokenUrl, {\n              method: \"POST\",\n              body: JSON.stringify({\n                deviceId: deviceId,\n                refreshToken: authData.refreshToken\n              }),\n              headers: {\n                \"Content-Type\": \"application/json\",\n                \"Accept\": \"application/json\"\n              }\n            }));\n\n          case 12:\n            res = _context4.sent;\n\n            if (res.ok) {\n              _context4.next = 21;\n              break;\n            }\n\n            dispatch(loadActions.stopLoading());\n            errorMessage = \"Internal server error!\";\n            _context4.next = 18;\n            return _regeneratorRuntime.awrap(res.json());\n\n          case 18:\n            errorData = _context4.sent;\n\n            if (errorData.data && errorData.data.length !== 0) {\n              errorMessage = errorData.data[0].msg;\n            } else {\n              errorMessage = errorData.message;\n            }\n\n            throw new Error(errorMessage);\n\n          case 21:\n            _context4.next = 23;\n            return _regeneratorRuntime.awrap(res.json());\n\n          case 23:\n            resData = _context4.sent;\n            newRefreshToken = resData.refresh;\n            accessToken = resData.token;\n            _context4.next = 28;\n            return _regeneratorRuntime.awrap(getData(\"authData\"));\n\n          case 28:\n            _await$getData = _context4.sent;\n            user = _await$getData.user;\n            expiresIn = new Date(Date.now() + 6 * (60 * 60 * 1000)).toISOString();\n            dispatch(authenticateUser({\n              refreshToken: newRefreshToken,\n              accessToken: accessToken,\n              user: user,\n              expiresIn: expiresIn\n            }));\n            _context4.next = 34;\n            return _regeneratorRuntime.awrap(storeData(\"authData\", {\n              refreshToken: newRefreshToken,\n              accessToken: accessToken,\n              user: user,\n              expiresIn: expiresIn\n            }));\n\n          case 34:\n            dispatch(loadActions.stopLoading());\n            _context4.next = 41;\n            break;\n\n          case 37:\n            _context4.prev = 37;\n            _context4.t0 = _context4[\"catch\"](0);\n            dispatch(loadActions.stopLoading());\n            throw _context4.t0;\n\n          case 41:\n          case \"end\":\n            return _context4.stop();\n        }\n      }\n    }, null, null, [[0, 37]], Promise);\n  };\n};\nexport var storeData = function storeData(key, value) {\n  var jsonValue;\n  return _regeneratorRuntime.async(function storeData$(_context5) {\n    while (1) {\n      switch (_context5.prev = _context5.next) {\n        case 0:\n          _context5.prev = 0;\n          jsonValue = JSON.stringify(value);\n          _context5.next = 4;\n          return _regeneratorRuntime.awrap(AsyncStorage.setItem(key, jsonValue));\n\n        case 4:\n          _context5.next = 9;\n          break;\n\n        case 6:\n          _context5.prev = 6;\n          _context5.t0 = _context5[\"catch\"](0);\n          throw _context5.t0;\n\n        case 9:\n        case \"end\":\n          return _context5.stop();\n      }\n    }\n  }, null, null, [[0, 6]], Promise);\n};\nexport var getData = function getData(key) {\n  var jsonValue;\n  return _regeneratorRuntime.async(function getData$(_context6) {\n    while (1) {\n      switch (_context6.prev = _context6.next) {\n        case 0:\n          _context6.prev = 0;\n          _context6.next = 3;\n          return _regeneratorRuntime.awrap(AsyncStorage.getItem(key));\n\n        case 3:\n          jsonValue = _context6.sent;\n          return _context6.abrupt(\"return\", jsonValue !== null ? JSON.parse(jsonValue) : null);\n\n        case 7:\n          _context6.prev = 7;\n          _context6.t0 = _context6[\"catch\"](0);\n          throw _context6.t0;\n\n        case 10:\n        case \"end\":\n          return _context6.stop();\n      }\n    }\n  }, null, null, [[0, 7]], Promise);\n};","map":{"version":3,"sources":["/home/felix/Felix/Hack/hack/store/actions/auth.js"],"names":["AUTHENTICATE_SUCCESS","AUTHENTICATE","AUTHENTICATE_FAIL","SET_DEVICE_ID","AsyncStorage","refreshTokenUrl","requestLoginUrl","verifyLoginUrl","loadActions","setDeviceId","deviceId","dispatch","setItem","type","payload","console","log","authenticate","phone","channel","getState","auth","startLoading","fetch","method","body","JSON","stringify","headers","res","ok","stopLoading","errorMessage","json","errorData","data","length","msg","message","Error","resData","verifyOtp","otp","controller","AbortController","timeoutId","setTimeout","abort","code","signal","refreshToken","refresh","accessToken","token","user","expiresIn","Date","now","toISOString","authenticateUser","storeData","authFail","userValues","error","getItem","getData","authData","newRefreshToken","key","value","jsonValue","parse"],"mappings":"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","sourcesContent":["export const AUTHENTICATE_SUCCESS = \"AUTHENTICATE_SUCCESS\"\nexport const AUTHENTICATE = \"AUTHENTICATE\"\nexport const AUTHENTICATE_FAIL = \"AUTHENTICATE_FAIL\"\nexport const SET_DEVICE_ID = \"SET_DEVICE_ID\"\nimport AsyncStorage from \"@react-native-async-storage/async-storage\"\nimport { refreshTokenUrl, requestLoginUrl, verifyLoginUrl } from \"../../constants/endpoints\"\nimport * as loadActions from \"./loading\";\n\nexport const setDeviceId = (deviceId) => {\n\treturn async dispatch => {\n\t\ttry {\n\t\t\tawait AsyncStorage.setItem(\"deviceId\", deviceId)\n\t\t\t// console.log(deviceId)\n\t\t\tawait dispatch({ type: SET_DEVICE_ID, payload: deviceId })\n\t\t} catch (error) {\n\t\t\tconsole.log(error)\n\t\t}\n\t}\n}\n\n\nexport const authenticate = (phone, channel) => {\n\treturn async (dispatch, getState) => {\n\t\ttry {\n\t\t\t// console.log(\"loading...\")\n\t\t\tconst deviceId = getState().auth.deviceId\n\t\t\tdispatch(loadActions.startLoading(\"Sending Verification SMS to \" + phone))\n\t\t\tconsole.log(`requesting from ${requestLoginUrl}...`)\n\n\t\t\tconst res = await fetch(requestLoginUrl, {\n\t\t\t\tmethod: \"POST\",\n\t\t\t\tbody: JSON.stringify({ phone: phone, deviceId: deviceId, channel: channel }),\n\t\t\t\theaders: {\n\t\t\t\t\t\"Content-Type\": \"application/json\",\n\t\t\t\t\t\"Accept\": \"application/json\"\n\t\t\t\t}\n\t\t\t})\n\t\t\tif (!res.ok) {\n\t\t\t\tdispatch(loadActions.stopLoading())\n\t\t\t\tlet errorMessage = \"Internal server error!\"\n\t\t\t\tconst errorData = await res.json()\n\t\t\t\tif (errorData.data && errorData.data.length !== 0) {\n\t\t\t\t\terrorMessage = errorData.data[0].msg\n\t\t\t\t} else {\n\t\t\t\t\terrorMessage = errorData.message\n\t\t\t\t}\n\t\t\t\tthrow new Error(errorMessage)\n\t\t\t}\n\t\t\tconst resData = await res.json()\n\t\t\tconsole.log(resData)\n\t\t\tdispatch({ type: AUTHENTICATE, payload: resData })\n\t\t\tdispatch(loadActions.stopLoading())\n\t\t} catch (error) {\n\t\t\tthrow error\n\t\t}\n\t}\n}\nexport const verifyOtp = (otp, phone) => {\n\treturn async (dispatch, getState) => {\n\t\tconst controller = new AbortController()\n\n\t\t// 5 second timeout:\n\t\tconst timeoutId = setTimeout(() => controller.abort(), 10000)\n\t\ttry {\n\t\t\tdispatch(loadActions.startLoading(\"Verifying OTP\"))\n\t\t\tconsole.log(`requesting from ${verifyLoginUrl}...`)\n\t\t\tconst res = await fetch(verifyLoginUrl, {\n\t\t\t\tmethod: \"POST\",\n\t\t\t\tbody: JSON.stringify({ phone: phone, deviceId: getState().auth.deviceId, code: otp }),\n\t\t\t\theaders: {\n\t\t\t\t\t\"Content-Type\": \"application/json\",\n\t\t\t\t\t\"Accept\": \"application/json\"\n\t\t\t\t},\n\t\t\t\tsignal: controller.signal\n\t\t\t})\n\t\t\tif (!res.ok) {\n\t\t\t\t// clearTimeout(timeoutId)\n\t\t\t\tdispatch(loadActions.stopLoading())\n\t\t\t\tlet errorMessage = \"Internal server error!\"\n\t\t\t\tconst errorData = await res.json()\n\t\t\t\tif (errorData.data && errorData.data.length !== 0) {\n\t\t\t\t\terrorMessage = errorData.data[0].msg\n\t\t\t\t} else {\n\t\t\t\t\terrorMessage = errorData.message\n\t\t\t\t}\n\t\t\t\tthrow new Error(errorMessage)\n\t\t\t}\n\t\t\tconst resData = await res.json()\n\t\t\tconsole.log(resData)\n\n\t\t\tconst refreshToken = resData.refresh\n\t\t\tconst accessToken = resData.token\n\t\t\tconst user = resData.user\n\t\t\tconst expiresIn = new Date(Date.now() + 6 * (60 * 60 * 1000)).toISOString()\n\n\t\t\tdispatch(authenticateUser({ refreshToken, accessToken, user, expiresIn }))\n\t\t\tawait storeData(\"authData\", { refreshToken, accessToken, user, expiresIn })\n\n\t\t\t// dispatch({ type: AUTHENTICATE_SUCCESS, payload: { refreshToken, accessToken, user, expiresIn } })\n\t\t\tdispatch(loadActions.stopLoading())\n\t\t\t// clearTimeout(timeoutId)\n\t\t} catch (error) {\n\t\t\t// clearTimeout(timeoutId)\n\t\t\tdispatch(loadActions.stopLoading())\n\t\t\tthrow error\n\n\t\t}\n\t}\n}\nexport const authFail = () => {\n\treturn dispatch => {\n\t\tdispatch({ type: AUTHENTICATE_FAIL })\n\t}\n}\nexport const authenticateUser = (userValues) => {\n\treturn dispatch => {\n\t\tconst { refreshToken, accessToken, user, expiresIn } = userValues\n\t\ttry {\n\t\t\tdispatch({ type: AUTHENTICATE_SUCCESS, payload: { refreshToken, accessToken, user, expiresIn } })\n\t\t} catch (error) {\n\t\t\tthrow error\n\t\t}\n\t}\n}\n\nexport const refreshToken = () => {\n\treturn async (dispatch, getState) => {\n\t\ttry {\n\t\t\t// console.log(\"loading...\")\n\t\t\tconst deviceId = await AsyncStorage.getItem(\"deviceId\")\n\t\t\tconst authData = await getData(\"authData\")\n\t\t\tdispatch(loadActions.startLoading(\"Loading... \"))\n\t\t\tconsole.log(deviceId)\n\t\t\tconsole.log(`requesting from ${refreshTokenUrl}...`)\n\t\t\tconst res = await fetch(refreshTokenUrl, {\n\t\t\t\tmethod: \"POST\",\n\t\t\t\tbody: JSON.stringify({ deviceId: deviceId, refreshToken: authData.refreshToken }),\n\t\t\t\theaders: {\n\t\t\t\t\t\"Content-Type\": \"application/json\",\n\t\t\t\t\t\"Accept\": \"application/json\"\n\t\t\t\t}\n\t\t\t})\n\t\t\tif (!res.ok) {\n\t\t\t\tdispatch(loadActions.stopLoading())\n\t\t\t\tlet errorMessage = \"Internal server error!\"\n\t\t\t\tconst errorData = await res.json()\n\t\t\t\tif (errorData.data && errorData.data.length !== 0) {\n\t\t\t\t\terrorMessage = errorData.data[0].msg\n\t\t\t\t} else {\n\t\t\t\t\terrorMessage = errorData.message\n\t\t\t\t}\n\t\t\t\tthrow new Error(errorMessage)\n\t\t\t}\n\t\t\tconst resData = await res.json()\n\t\t\t// console.log(resData)\n\t\t\tconst newRefreshToken = resData.refresh\n\t\t\tconst accessToken = resData.token\n\t\t\tconst { user } = await getData(\"authData\")\n\t\t\tconst expiresIn = new Date(Date.now() + 6 * (60 * 60 * 1000)).toISOString()\n\t\t\tdispatch(authenticateUser({ refreshToken: newRefreshToken, accessToken, user, expiresIn }))\n\t\t\tawait storeData(\"authData\", { refreshToken: newRefreshToken, accessToken, user, expiresIn })\n\t\t\tdispatch(loadActions.stopLoading())\n\t\t} catch (error) {\n\t\t\tdispatch(loadActions.stopLoading())\n\t\t\tthrow error\n\t\t}\n\t}\n}\n\nexport const storeData = async (key, value) => {\n\t// return async dispatch => {\n\ttry {\n\t\tconst jsonValue = JSON.stringify(value)\n\t\tawait AsyncStorage.setItem(key, jsonValue)\n\t} catch (e) {\n\t\tthrow e\n\t}\n\t// }\n}\n\nexport const getData = async (key) => {\n\ttry {\n\t\tconst jsonValue = await AsyncStorage.getItem(key)\n\t\treturn jsonValue !== null ? JSON.parse(jsonValue) : null;\n\t} catch (e) {\n\t\tthrow e\n\t}\n}"]},"metadata":{},"sourceType":"module"}
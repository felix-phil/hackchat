{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nvar _jsxFileName = \"/home/felix/Felix/Hack/hack/App.js\";\nimport React, { useEffect } from 'react';\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport View from \"react-native-web/dist/exports/View\";\nimport { LogBox } from \"react-native-web/dist/index\";\nimport { Provider as StoreProvider } from \"react-redux\";\nimport store from \"./store/store\";\nimport { Provider as PaperProvider, DarkTheme as PaperDarkTheme, DefaultTheme as PaperDefaultTheme } from 'react-native-paper';\nimport NavContainer from \"./navigations/NavigationContainer\";\nimport { NavigationContainer, DarkTheme, DefaultTheme } from '@react-navigation/native';\nimport merge from \"deepmerge\";\nimport { PreferencesContext } from \"./constants/PreferencesContext\";\nexport default function App() {\n  var _React$useState = React.useState(true),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      isThemeDark = _React$useState2[0],\n      setIsThemeDark = _React$useState2[1];\n\n  var CombinedDefaultTheme = merge(PaperDefaultTheme, DefaultTheme);\n  var CombinedDarkTheme = merge(PaperDarkTheme, DarkTheme);\n  var theme = isThemeDark ? CombinedDarkTheme : CombinedDefaultTheme;\n  var toggleTheme = React.useCallback(function () {\n    return setIsThemeDark(!isThemeDark);\n  }, [isThemeDark]);\n  var preferences = React.useMemo(function () {\n    return {\n      toggleTheme: toggleTheme,\n      isThemeDark: isThemeDark\n    };\n  }, [toggleTheme, isThemeDark]);\n  useEffect(function () {\n    LogBox.ignoreLogs([\"[expo-notifications]\", \"Setting a timer\"]);\n  }, []);\n  return React.createElement(PreferencesContext.Provider, {\n    value: preferences,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 5\n    }\n  }, React.createElement(StoreProvider, {\n    store: store,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 5\n    }\n  }, React.createElement(PaperProvider, {\n    theme: theme,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 7\n    }\n  }, React.createElement(NavigationContainer, {\n    theme: theme,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 9\n    }\n  }, React.createElement(NavContainer, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 11\n    }\n  })))));\n}\nvar styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: '#fff',\n    alignItems: 'center',\n    justifyContent: 'center'\n  }\n});","map":{"version":3,"sources":["/home/felix/Felix/Hack/hack/App.js"],"names":["React","useEffect","LogBox","Provider","StoreProvider","store","PaperProvider","DarkTheme","PaperDarkTheme","DefaultTheme","PaperDefaultTheme","NavContainer","NavigationContainer","merge","PreferencesContext","App","useState","isThemeDark","setIsThemeDark","CombinedDefaultTheme","CombinedDarkTheme","theme","toggleTheme","useCallback","preferences","useMemo","ignoreLogs","styles","StyleSheet","create","container","flex","backgroundColor","alignItems","justifyContent"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;;;;SACiCC,M;AACjC,SAASC,QAAQ,IAAIC,aAArB,QAA0C,aAA1C;AACA,OAAOC,KAAP;AACA,SAASF,QAAQ,IAAIG,aAArB,EAAoCC,SAAS,IAAIC,cAAjD,EAAiEC,YAAY,IAAIC,iBAAjF,QAA0G,oBAA1G;AACA,OAAOC,YAAP;AACA,SAASC,mBAAT,EAA8BL,SAA9B,EAAyCE,YAAzC,QAA6D,0BAA7D;AACA,OAAOI,KAAP,MAAkB,WAAlB;AACA,SAASC,kBAAT;AAEA,eAAe,SAASC,GAAT,GAAe;AAC5B,wBAAsCf,KAAK,CAACgB,QAAN,CAAe,IAAf,CAAtC;AAAA;AAAA,MAAOC,WAAP;AAAA,MAAoBC,cAApB;;AACA,MAAMC,oBAAoB,GAAGN,KAAK,CAACH,iBAAD,EAAoBD,YAApB,CAAlC;AACA,MAAMW,iBAAiB,GAAGP,KAAK,CAACL,cAAD,EAAiBD,SAAjB,CAA/B;AAEA,MAAIc,KAAK,GAAGJ,WAAW,GAAGG,iBAAH,GAAuBD,oBAA9C;AAGA,MAAMG,WAAW,GAAGtB,KAAK,CAACuB,WAAN,CAAkB,YAAM;AAC1C,WAAOL,cAAc,CAAC,CAACD,WAAF,CAArB;AACD,GAFmB,EAEjB,CAACA,WAAD,CAFiB,CAApB;AAIA,MAAMO,WAAW,GAAGxB,KAAK,CAACyB,OAAN,CAClB;AAAA,WAAO;AACLH,MAAAA,WAAW,EAAXA,WADK;AAELL,MAAAA,WAAW,EAAXA;AAFK,KAAP;AAAA,GADkB,EAKlB,CAACK,WAAD,EAAcL,WAAd,CALkB,CAApB;AAQAhB,EAAAA,SAAS,CAAC,YAAM;AACdC,IAAAA,MAAM,CAACwB,UAAP,CAAkB,CAAC,sBAAD,EAAyB,iBAAzB,CAAlB;AAED,GAHQ,EAGN,EAHM,CAAT;AAKA,SACE,oBAAC,kBAAD,CAAoB,QAApB;AAA6B,IAAA,KAAK,EAAEF,WAApC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACA,oBAAC,aAAD;AAAe,IAAA,KAAK,EAAEnB,KAAtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,oBAAC,aAAD;AAAe,IAAA,KAAK,EAAEgB,KAAtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,oBAAC,mBAAD;AAAqB,IAAA,KAAK,EAAEA,KAA5B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,oBAAC,YAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,CADF,CADF,CADA,CADF;AAWD;AAED,IAAMM,MAAM,GAAGC,UAAU,CAACC,MAAX,CAAkB;AAC/BC,EAAAA,SAAS,EAAE;AACTC,IAAAA,IAAI,EAAE,CADG;AAETC,IAAAA,eAAe,EAAE,MAFR;AAGTC,IAAAA,UAAU,EAAE,QAHH;AAITC,IAAAA,cAAc,EAAE;AAJP;AADoB,CAAlB,CAAf","sourcesContent":["import React, { useEffect } from 'react';\nimport { StyleSheet, Text, View, LogBox } from 'react-native';\nimport { Provider as StoreProvider } from \"react-redux\";\nimport store from \"./store/store\"\nimport { Provider as PaperProvider, DarkTheme as PaperDarkTheme, DefaultTheme as PaperDefaultTheme } from 'react-native-paper';\nimport NavContainer from \"./navigations/NavigationContainer\";\nimport { NavigationContainer, DarkTheme, DefaultTheme } from '@react-navigation/native';\nimport merge from \"deepmerge\";\nimport { PreferencesContext } from './constants/PreferencesContext';\n\nexport default function App() {\n  const [isThemeDark, setIsThemeDark] = React.useState(true);\n  const CombinedDefaultTheme = merge(PaperDefaultTheme, DefaultTheme);\n  const CombinedDarkTheme = merge(PaperDarkTheme, DarkTheme);\n\n  let theme = isThemeDark ? CombinedDarkTheme : CombinedDefaultTheme;\n\n\n  const toggleTheme = React.useCallback(() => {\n    return setIsThemeDark(!isThemeDark);\n  }, [isThemeDark]);\n\n  const preferences = React.useMemo(\n    () => ({\n      toggleTheme,\n      isThemeDark,\n    }),\n    [toggleTheme, isThemeDark]\n  );\n\n  useEffect(() => {\n    LogBox.ignoreLogs([\"[expo-notifications]\", \"Setting a timer\"])\n    // LogBox.ignoreAllLogs()\n  }, [])\n\n  return (\n    <PreferencesContext.Provider value={preferences}>\n    <StoreProvider store={store}>\n      <PaperProvider theme={theme}>\n        <NavigationContainer theme={theme}>\n          <NavContainer />\n        </NavigationContainer>\n      </PaperProvider>\n    </StoreProvider>\n    </PreferencesContext.Provider>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: '#fff',\n    alignItems: 'center',\n    justifyContent: 'center',\n  },\n});\n"]},"metadata":{},"sourceType":"module"}